# teams_analyzer/BUILD.bazel
load("@bazel_tools//tools/build_defs/pkg:pkg.bzl", "pkg_tar")
load("@bazel-contrib_rules_python//python:defs.bzl", "py_binary", "py_library", "py_test")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_tarball")

# =================================================================
# 1️⃣ LIBRERÍA PRINCIPAL
# =================================================================
py_library(
    name = "teams_analyzer_lib",
    srcs = glob(["**/*.py"]),
    deps = [
        "//core",
        "@pypi//python_dotenv",
        "@pypi//beautifulsoup4",
        "@pypi//requests",
        "@pypi//selenium",
        "@pypi//webdriver_manager",
        "@pypi//unidecode",
    ],
)

# =================================================================
# 2️⃣ EJECUCIÓN LOCAL (SIN DOCKER)
# =================================================================
py_binary(
    name = "teams_analyzer_local",
    main = "teams_analyzer.py",
    srcs = ["teams_analyzer.py"],
    data = [
        ".env",
        "biwenger-tools-sa.json",
    ],
    deps = [":teams_analyzer_lib"],
)

# =================================================================
# 3️⃣ CAPAS PARA LA IMAGEN DOCKER
# =================================================================
pkg_tar(
    name = "requirements_layer",
    srcs = ["//:requirements_lock.txt"],
    package_dir = "/app",
)

pkg_tar(
    name = "core_layer",
    srcs = ["//core"],
    package_dir = "/app",
)

pkg_tar(
    name = "teams_analyzer_local_layer",
    srcs = glob(["**/*.py"]) + [
        ".env",
        "biwenger-tools-sa.json",
    ],
    package_dir = "/app/teams_analyzer",
)

# =================================================================
# 4️⃣ IMAGEN DOCKER LOCAL (INSTALACIÓN + EJECUCIÓN SEPARADAS)
# =================================================================
oci_image(
    name = "teams_analyzer_image_local",
    base = "@debian_base_image",
    tars = [
        ":requirements_layer",
        ":core_layer",
        ":teams_analyzer_local_layer",
    ],
    env = {
        "PYTHONPATH": "/app",
        "PYTHONUNBUFFERED": "1",
        "PYTHONDONTWRITEBYTECODE": "1",
        "PIP_BREAK_SYSTEM_PACKAGES": "1",
    },
    workdir = "/app",
    entrypoint = ["/bin/bash", "-c"],
    cmd = [
        "set -ex && " +
        "echo 'Instalando dependencias del sistema...' && " +
        "apt-get update && " +
        "apt-get install -y --no-install-recommends python3 python3-pip chromium chromium-driver fonts-liberation libnss3 libasound2 libatk-bridge2.0-0 libcups2 libdrm2 libgbm1 libxcomposite1 libxdamage1 libxfixes3 libxrandr2 libxtst6 libatk1.0-0 libgtk-3-0 libx11-xcb1 && " +
        "rm -rf /var/lib/apt/lists/* && " +
        "echo 'Instalando dependencias Python...' && " +
        "pip3 install --no-cache-dir --break-system-packages -r /app/requirements_lock.txt && " +
        "echo 'Dependencias instaladas correctamente' && " +
        "echo 'Iniciando teams_analyzer...' && " +
        "exec python3 -m teams_analyzer.teams_analyzer"
    ],
)

# =================================================================
# 5️⃣ COMANDO PARA CARGAR LA IMAGEN A DOCKER
# =================================================================
oci_tarball(
    name = "load_image_to_docker_local",
    image = ":teams_analyzer_image_local",
    repo_tags = ["bazel/teams_analyzer:local"],
)

# =================================================================
# 6️⃣ TESTS UNITARIOS (PYTEST)
# =================================================================
py_test(
    name = "teams_analyzer_tests",
    args = ["teams_analyzer/tests/"],
    timeout = "short",
    main = "tests/main.py",
    srcs = glob(["tests/**/*.py"]),
    deps = [
        ":teams_analyzer_lib",
        "//core",
        "@pypi//pytest",
    ],
)